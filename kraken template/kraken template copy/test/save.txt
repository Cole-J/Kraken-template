#pragma once

#include "main.h"
#include "pros/motors.hpp"
#include "pros/rtos.hpp"
#include <vector>

#include "kt/util.hpp"


namespace kt {
    class Chassis {
        private:
        public:

            int JOYSTICK_THRESHOLD = 0;

            pros::motor_brake_mode_e_t CURRENT_BRAKE = pros::E_MOTOR_BRAKE_COAST;

            //int CURRENT_MA = 2500;

            std::vector<pros::Motor> left_motors;

            std::vector<pros::Motor> right_motors;

            pros::Imu imu;

            // pid objects

            // slew objects

            // drive mode (e_mode)

            void initialize();

            //pros::Task ez_auto;

            Chassis(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports,
                    int imu_port, double motor_rpm, double wheel_rpm, double wheel_diameter);

            void opcontrol_tank();

            void opcontrol_arcade_standard(e_controller_type stick_type);

            void opcontrol_arcade_flipped(e_controller_type stick_type);

            void move() {
                left_motors.front().move(127);
                right_motors.front().move(127);
            }
    };
}

#include "kt/drive/drive.hpp"

#include "pros/motors.hpp"

#include "kt/util.hpp"

//#include "main.h"


kt::Chassis::Chassis(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports,
                    int imu_port, double motor_rpm, double wheel_rpm, double wheel_diameter) : imu(imu_port) {
    for (auto i : left_motor_ports) {
        pros::Motor motor(abs(i));
        motor.set_reversed(kt::util::reversed_active(i));
        left_motors.push_back(motor);
    }
    for (auto i : right_motor_ports) {
        pros::Motor motor(abs(i));
        motor.set_reversed(kt::util::reversed_active(i));
        right_motors.push_back(motor);
    }
    
}




#pragma once

#include "api.h"
#include "pros/misc.hpp"


extern pros::Controller master;

namespace kt {


enum e_controller_type {
    SINGLE = 0,
    SPLIT = 1
};


namespace util {


int sgn(double input);

bool reversed_active(double input);



const int DELAY_TIME = 20;

}
}

#include "main.h"
#include "kt/util.hpp"

#include "pros/misc.h"
#include "pros/misc.hpp"


pros::Controller master(pros::E_CONTROLLER_MASTER);


namespace kt {
namespace util {

bool reversed_active(double input) {
  if (input < 0) return true;
  return false;
}

int sgn(double input) {
  if (input > 0)
    return 1;
  else if (input < 0)
    return -1;
  return 0;
}

}
}